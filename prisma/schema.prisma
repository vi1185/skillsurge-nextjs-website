generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  learningPaths LearningPath[]
  progress      UserProgress[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LearningPath {
    id            String    @id @default(cuid())
    title         String
    description   String
    category      String
    difficulty    String
    duration      String
    isPublic      Boolean   @default(true)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    userId        String
    user          User      @relation(fields: [userId], references: [id])
    modules       Module[]
    enrolledUsers UserProgress[]

    @@index([userId])
}

model Module {
    id            String    @id @default(cuid())
    title         String
    description   String
    order         Int
    content       String
    pathId        String
    path          LearningPath @relation(fields: [pathId], references: [id])
    completedBy   UserProgress[]

    @@index([pathId])
}

model UserProgress {
    id                String    @id @default(cuid())
    userId            String
    user              User      @relation(fields: [userId], references: [id])
    totalPoints       Int       @default(0)
    currentStreak     Int       @default(0)
    longestStreak     Int       @default(0)
    lastActive        DateTime  @default(now())
    enrolledPaths     LearningPath[]
    completedModules  Module[]
    achievements      Achievement[]
    skills           Skill[]
    recentActivities Activity[]

    @@index([userId])
}

model Achievement {
    id          String    @id @default(cuid())
    title       String
    description String
    icon        String
    unlockedAt  DateTime
    progressId  String
    userProgress    UserProgress @relation(fields: [progressId], references: [id])

    @@index([progressId])
}

model Skill {
    id          String    @id @default(cuid())
    name        String
    level       Int       @default(1)
    progressValue    Float     @default(0)
    progressId  String
    userProgress    UserProgress @relation(fields: [progressId], references: [id])

    @@unique([progressId, name])
    @@index([progressId])
}

model Activity {
    id          String    @id @default(cuid())
    type        String
    details     String
    timestamp   DateTime  @default(now())
    progressId  String
    userProgress    UserProgress @relation(fields: [progressId], references: [id])

    @@index([progressId])
} 